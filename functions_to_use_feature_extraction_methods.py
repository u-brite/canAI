# -*- coding: utf-8 -*-
"""Functions to Use Feature Extraction Methods

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sIA4WIwCcL-OFa91cQlWxjGeAEYrHm1s
"""

#PCA
import sklearn
from sklearn.decomposition import PCA
def PCAmethod(X):
  pca = PCA(n_components=3)
  X_pca = pca.fit_transform(X)
  PCA_df = pd.DataFrame(data = X_pca, columns = ['pc1', 'pc2','pc3'])
  PCA_df = pd.concat([PCA_df, df['class']], axis = 1)
  PCA_df['class'] = LabelEncoder().fit_transform(PCA_df['class'])
  PCA_df.head()
  print(pca.explained_variance_)

#ICA
from sklearn.decomposition import FastICA
def ICAmethod(X):
  ica = FastICA(n_components=3)
  ica.fit_transform(X)
  print(ica.explained_variance_)

#LLE
from sklearn.manifold import LocallyLinearEmbedding
def LLEmethod(X):
  embedding = LocallyLinearEmbedding(n_components=3)
  embedding.fit_transform(X)
  print(lle.explained_variance_)

#LDA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
def LDAmethod(X,Y):
  lda = LinearDiscriminantAnalysis(n_components=3)
  lda.fit(X,Y).transform(X)
  print(lda.explained_variance_)

#RFE
def RFEmethod(X,Y):
  rfe = RFE(estimator=DecisionTreeClassifier(), n_features_to_select=3)
  rfe.fit(X, Y)
  rfe.transform(X, Y)

#evaluation
def randomforest(X,Y):
  from sklearn.ensemble import RandomForestClassifier
  classifier = RandomForestClassifier(n_estimators = 1000, random_state = 42)
  classifier.fit(X,Y)
  y_pred = classifier.predict(X)
  
def metrics(y_test,y_pred):
  from sklearn import metrics
  print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
  print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
  print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))